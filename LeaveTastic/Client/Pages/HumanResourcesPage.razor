@page "/hrmanager"

<RadzenCard>
    <RadzenDataGrid @ref=radzenDataGrid class="w-100" Data="employees" TItem=Employee AllowSorting=true>
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
        </EmptyTemplate>
        <Template Context="employee">
            <RadzenDataGrid class="w-100" Data="employee.Leaves" TItem=Leave AllowSorting=true Density="Density.Compact">
                <EmptyTemplate>
                    <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
                </EmptyTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="Leave" Property="Id" Width="100px" Title="Id"> </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Leave" Property="FromDate" Title="From Date">
                        <Template Context="data">
                            @(DateOnly.FromDateTime(data.FromDate))
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Leave" Property="ToDate" Title="To Date">
                        <Template Context="data">
                            @(DateOnly.FromDateTime(data.ToDate))
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Leave" Title="Total Days">
                        <Template Context="data">
                            @(((data.ToDate - data.FromDate).Days + 1).ToString())
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </Template>
        <Columns>
            <RadzenDataGridColumn TItem="Employee" Property="Id" Width="100px" Title="Id" Groupable=false> </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Employee" Property="Name" Title="Employ Name"> </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Employee" Property="Leaves.Count" Title="Leaves Count">
     @*           <Template Context="data">
                    @data.Leaves.Count
                </Template>*@
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Employee" Property="ManagerId" Width="120px" Title="Leave Days" Groupable=false>
                <Template Context="data">
                    @data.LeaveDays.ToString()
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    [Inject]
    HelperService helperService { get; set; } = default!;

    private RadzenDataGrid<Employee>? radzenDataGrid { get; set; }


    private List<Employee> employees { get; set; } = new();
    private List<Leave> leaves { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = helperService.SelectedEmployee;

        if (user?.RoleId != 3)
        {
            helperService.NotificationService.Notify(NotificationSeverity.Warning, "Invalid user.", "Please select a HR manager user,in order to view this page", 6000);
            helperService.NavigationManager.NavigateTo("/");
        }

        await GetData();
    }

    private async Task GetData()
    {
        var response = await helperService.HttpService.Get<DataResponse<List<Employee>>>("api/employee"); //Get list of all employees
        if (!response.HasError)
        {
            employees.AddRange(response.Data);
        }

        var dataResponse = await helperService.HttpService.Get<DataResponse<List<Leave>>>("api/leave/hr"); //Get list of all employees
        if (!response.HasError)
        {
            leaves.AddRange(dataResponse.Data);

            foreach (var leave in leaves)
            {
                employees.Find(x => x.Id == leave.EmployeeId).Leaves.Add(leave);
            }
        }

        await radzenDataGrid?.Reload();
    }
}
