@using LeaveTastic.Client.Pages.Dialogs;
@inherits RadzenComponent

<RadzenCard>
    <RadzenText TextStyle=TextStyle.DisplayH6 Text="Employee's Leaves"></RadzenText>
    <RadzenButton class="rz-mb-3" Text="New Request" Icon="add_circle" Click="NewRequest"></RadzenButton>
    <RadzenDataGrid @ref=radzenDataGrid class="w-100" Data="leaves" TItem=Leave AllowSorting=true>
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
        </EmptyTemplate>
        <Columns>
            <RadzenDataGridColumn TItem="Leave" Property="Id" Width="100px" Title="Id"> </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Leave" Property="FromDate" Title="From Date">
                <Template Context="data">
                    @(DateOnly.FromDateTime(data.FromDate))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Leave" Property="ToDate" Title="To Date">
                <Template Context="data">
                    @(DateOnly.FromDateTime(data.ToDate))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Leave" Title="Total Days">
                <Template Context="data">
                    @(((data.ToDate - data.FromDate).Days + 1).ToString())
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Leave" Property="IsApproved" Width="100px" Title="Approved"> </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    [Inject]
    HelperService helperService { get; set; } = default!;

    private RadzenDataGrid<Leave>? radzenDataGrid { get; set; }

    private Employee selectedEmploy { get; set; }
    private List<Leave> leaves { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        selectedEmploy = helperService.SelectedEmployee ?? new();
        await GetLeaves();

        helperService.SelectedEmployeeChanged += EmploySelected;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    public override void Dispose()
    {
        helperService.SelectedEmployeeChanged -= EmploySelected;
    }

    private async void EmploySelected(Employee employee)
    {
        selectedEmploy = employee;
        await GetLeaves();
        await radzenDataGrid?.Reload();
        StateHasChanged();
    }

    private async Task GetLeaves()
    {
        var result = await helperService.HttpService.Get<DataResponse<List<Leave>>>($"api/leave/emp/{selectedEmploy.Id}");
        if (!result.HasError)
        {
            leaves = new();
            foreach (var item in result.Data)
            {
                leaves.Add(item);
            }
        }
    }

    private async Task NewRequest()
    {
        await helperService.OpenDialog<NewRequest>("New request for leave", default);
        await GetLeaves();
        await radzenDataGrid?.Reload();
        StateHasChanged();
    }
}
